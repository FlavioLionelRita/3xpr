{
    "operators": {
        "unary": {
            "-": {
                "name": "negative",
                "category": "arithmetic",
                "priority": 9,
                "return": "number",
                "params": [
                    {
                        "name": "value",
                        "type": "number"
                    }
                ]
            },
            "~": {
                "name": "bitNot",
                "category": "bitwise",
                "priority": 5,
                "return": "boolean",
                "params": [
                    {
                        "name": "value",
                        "type": "boolean"
                    }
                ]
            },
            "!": {
                "name": "not",
                "category": "logical",
                "priority": 5,
                "return": "boolean",
                "params": [
                    {
                        "name": "value",
                        "type": "boolean"
                    }
                ]
            }
        },
        "binary": {
            "+": {
                "name": "addition",
                "category": "arithmetic",
                "priority": 5,
                "return": "number",
                "params": [
                    {
                        "name": "a",
                        "type": "number"
                    },
                    {
                        "name": "b",
                        "type": "number"
                    }
                ]
            },
            "-": {
                "name": "subtraction",
                "category": "arithmetic",
                "priority": 5,
                "return": "number",
                "params": [
                    {
                        "name": "a",
                        "type": "number"
                    },
                    {
                        "name": "b",
                        "type": "number"
                    }
                ]
            },
            "*": {
                "name": "multiplication",
                "category": "arithmetic",
                "priority": 6,
                "return": "number",
                "params": [
                    {
                        "name": "a",
                        "type": "number"
                    },
                    {
                        "name": "b",
                        "type": "number"
                    }
                ]
            },
            "/": {
                "name": "division",
                "category": "arithmetic",
                "priority": 6,
                "return": "number",
                "params": [
                    {
                        "name": "a",
                        "type": "number"
                    },
                    {
                        "name": "b",
                        "type": "number"
                    }
                ]
            },
            "**": {
                "name": "exponentiation",
                "category": "arithmetic",
                "priority": 7,
                "return": "number",
                "params": [
                    {
                        "name": "a",
                        "type": "number"
                    },
                    {
                        "name": "b",
                        "type": "number"
                    }
                ]
            },
            "//": {
                "name": "floorDivision",
                "category": "arithmetic",
                "priority": 7,
                "return": "number",
                "params": [
                    {
                        "name": "a",
                        "type": "number"
                    },
                    {
                        "name": "b",
                        "type": "number"
                    }
                ]
            },
            "%": {
                "name": "mod",
                "category": "arithmetic",
                "priority": 8,
                "return": "number",
                "params": [
                    {
                        "name": "a",
                        "type": "number"
                    },
                    {
                        "name": "b",
                        "type": "number"
                    }
                ]
            },
            "&": {
                "name": "bitAnd",
                "category": "bitwise",
                "priority": 5,
                "return": "number",
                "params": [
                    {
                        "name": "a",
                        "type": "number"
                    },
                    {
                        "name": "b",
                        "type": "number"
                    }
                ]
            },
            "|": {
                "name": "bitOr",
                "category": "bitwise",
                "priority": 5,
                "return": "number",
                "params": [
                    {
                        "name": "a",
                        "type": "number"
                    },
                    {
                        "name": "b",
                        "type": "number"
                    }
                ]
            },
            "^": {
                "name": "bitXor",
                "category": "bitwise",
                "priority": 5,
                "return": "number",
                "params": [
                    {
                        "name": "a",
                        "type": "number"
                    },
                    {
                        "name": "b",
                        "type": "number"
                    }
                ]
            },
            "<<": {
                "name": "leftShift",
                "category": "bitwise",
                "priority": 5,
                "return": "number",
                "params": [
                    {
                        "name": "a",
                        "type": "number"
                    },
                    {
                        "name": "b",
                        "type": "number"
                    }
                ]
            },
            ">>": {
                "name": "rightShift",
                "category": "bitwise",
                "priority": 5,
                "return": "number",
                "params": [
                    {
                        "name": "a",
                        "type": "number"
                    },
                    {
                        "name": "b",
                        "type": "number"
                    }
                ]
            },
            "==": {
                "name": "equal",
                "category": "comparison",
                "priority": 4,
                "return": "boolean",
                "params": [
                    {
                        "name": "a",
                        "type": "T"
                    },
                    {
                        "name": "b",
                        "type": "T"
                    }
                ]
            },
            "===": {
                "name": "equal",
                "category": "comparison",
                "priority": 4,
                "return": "boolean",
                "params": [
                    {
                        "name": "a",
                        "type": "T"
                    },
                    {
                        "name": "b",
                        "type": "T"
                    }
                ]
            },
            "!=": {
                "name": "notEqual",
                "category": "comparison",
                "priority": 4,
                "return": "boolean",
                "params": [
                    {
                        "name": "a",
                        "type": "T"
                    },
                    {
                        "name": "b",
                        "type": "T"
                    }
                ]
            },
            "!==": {
                "name": "notEqual",
                "category": "comparison",
                "priority": 4,
                "return": "boolean",
                "params": [
                    {
                        "name": "a",
                        "type": "T"
                    },
                    {
                        "name": "b",
                        "type": "T"
                    }
                ]
            },
            ">": {
                "name": "greaterThan",
                "category": "comparison",
                "priority": 4,
                "return": "boolean",
                "params": [
                    {
                        "name": "a",
                        "type": "T"
                    },
                    {
                        "name": "b",
                        "type": "T"
                    }
                ]
            },
            "<": {
                "name": "lessThan",
                "category": "comparison",
                "priority": 4,
                "return": "boolean",
                "params": [
                    {
                        "name": "a",
                        "type": "T"
                    },
                    {
                        "name": "b",
                        "type": "T"
                    }
                ]
            },
            ">=": {
                "name": "greaterThanOrEqual",
                "category": "comparison",
                "priority": 4,
                "return": "boolean",
                "params": [
                    {
                        "name": "a",
                        "type": "T"
                    },
                    {
                        "name": "b",
                        "type": "T"
                    }
                ]
            },
            "<=": {
                "name": "lessThanOrEqual",
                "category": "comparison",
                "priority": 4,
                "return": "boolean",
                "params": [
                    {
                        "name": "a",
                        "type": "T"
                    },
                    {
                        "name": "b",
                        "type": "T"
                    }
                ]
            },
            "&&": {
                "name": "and",
                "category": "logical",
                "priority": 3,
                "return": "boolean",
                "params": [
                    {
                        "name": "a",
                        "type": "boolean"
                    },
                    {
                        "name": "b",
                        "type": "boolean"
                    }
                ]
            },
            "||": {
                "name": "or",
                "category": "logical",
                "priority": 3,
                "return": "boolean",
                "params": [
                    {
                        "name": "a",
                        "type": "boolean"
                    },
                    {
                        "name": "b",
                        "type": "boolean"
                    }
                ]
            },
            "[]": {
                "name": "item",
                "category": "list",
                "priority": 2,
                "return": "T",
                "params": [
                    {
                        "name": "array",
                        "type": "T[]"
                    },
                    {
                        "name": "index",
                        "type": "number"
                    }
                ]
            },
            "=": {
                "name": "assigment",
                "category": "assignment",
                "priority": 1,
                "return": "T",
                "params": [
                    {
                        "name": "a",
                        "type": "T"
                    },
                    {
                        "name": "b",
                        "type": "T"
                    }
                ]
            },
            "+=": {
                "name": "assigmentAddition",
                "category": "assignment",
                "priority": 1,
                "return": "number",
                "params": [
                    {
                        "name": "a",
                        "type": "number"
                    },
                    {
                        "name": "b",
                        "type": "number"
                    }
                ]
            },
            "-=": {
                "name": "assigmentSubtraction",
                "category": "assignment",
                "priority": 1,
                "return": "number",
                "params": [
                    {
                        "name": "a",
                        "type": "number"
                    },
                    {
                        "name": "b",
                        "type": "number"
                    }
                ]
            },
            "*=": {
                "name": "assigmentMultiplication",
                "category": "assignment",
                "priority": 1,
                "return": "number",
                "params": [
                    {
                        "name": "a",
                        "type": "number"
                    },
                    {
                        "name": "b",
                        "type": "number"
                    }
                ]
            },
            "/=": {
                "name": "assigmentDivision",
                "category": "assignment",
                "priority": 1,
                "return": "number",
                "params": [
                    {
                        "name": "a",
                        "type": "number"
                    },
                    {
                        "name": "b",
                        "type": "number"
                    }
                ]
            },
            "**=": {
                "name": "assigmentExponentiation",
                "category": "assignment",
                "priority": 1,
                "return": "number",
                "params": [
                    {
                        "name": "a",
                        "type": "number"
                    },
                    {
                        "name": "b",
                        "type": "number"
                    }
                ]
            },
            "//=": {
                "name": "assigmentFloorDivision",
                "category": "assignment",
                "priority": 1,
                "return": "number",
                "params": [
                    {
                        "name": "a",
                        "type": "number"
                    },
                    {
                        "name": "b",
                        "type": "number"
                    }
                ]
            },
            "%=": {
                "name": "assigmentMod",
                "category": "assignment",
                "priority": 1,
                "return": "number",
                "params": [
                    {
                        "name": "a",
                        "type": "number"
                    },
                    {
                        "name": "b",
                        "type": "number"
                    }
                ]
            },
            "&=": {
                "name": "assigmentBitAnd",
                "category": "assignment",
                "priority": 1,
                "return": "number",
                "params": [
                    {
                        "name": "a",
                        "type": "number"
                    },
                    {
                        "name": "b",
                        "type": "number"
                    }
                ]
            },
            "|=": {
                "name": "assigmentBitOr",
                "category": "assignment",
                "priority": 1,
                "return": "number",
                "params": [
                    {
                        "name": "a",
                        "type": "number"
                    },
                    {
                        "name": "b",
                        "type": "number"
                    }
                ]
            },
            "^=": {
                "name": "assigmentBitXor",
                "category": "assignment",
                "priority": 1,
                "return": "number",
                "params": [
                    {
                        "name": "a",
                        "type": "number"
                    },
                    {
                        "name": "b",
                        "type": "number"
                    }
                ]
            },
            "<<=": {
                "name": "assigmentLeftShift",
                "category": "assignment",
                "priority": 1,
                "return": "number",
                "params": [
                    {
                        "name": "a",
                        "type": "number"
                    },
                    {
                        "name": "b",
                        "type": "number"
                    }
                ]
            },
            ">>=": {
                "name": "assigmentRightShift",
                "category": "assignment",
                "priority": 1,
                "return": "number",
                "params": [
                    {
                        "name": "a",
                        "type": "number"
                    },
                    {
                        "name": "b",
                        "type": "number"
                    }
                ]
            }
        },
        "ternary": {
            "?": {
                "name": "condicional",
                "category": "flowcontrol",
                "priority": 1,
                "return": "T",
                "params": [
                    {
                        "name": "condition",
                        "type": "boolean"
                    },
                    {
                        "name": "b",
                        "type": "T"
                    },
                    {
                        "name": "b",
                        "type": "T"
                    }
                ]
            }
        }
    },
    "functions": {
        "sleep": {
            "description": "Delay a program execution for a given number of miliseconds.",
            "category": "general",
            "return": "void",
            "params": [
                {
                    "name": "miliseconds",
                    "type": "number"
                }
            ]
        },
        "between": {
            "description": "Specifies how to retrieve values from an expression within a specific range.",
            "category": "condition",
            "return": "boolean",
            "params": [
                {
                    "name": "value",
                    "type": "T"
                },
                {
                    "name": "from",
                    "type": "T"
                },
                {
                    "name": "to",
                    "type": "T"
                }
            ]
        },
        "includes": {
            "description": "Is used to reduce the use of multiple OR conditions",
            "category": "condition",
            "return": "boolean",
            "params": [
                {
                    "name": "value",
                    "type": "T"
                },
                {
                    "name": "list",
                    "type": "T[]"
                }
            ]
        },
        "abs": {
            "description": "Get the absolute value",
            "category": "numeric",
            "deterministic": true,
            "return": "number",
            "params": [
                {
                    "name": "value",
                    "type": "number"
                }
            ]
        },
        "acos": {
            "description": "Get the arc cosine",
            "category": "numeric",
            "deterministic": true,
            "return": "number",
            "params": [
                {
                    "name": "value",
                    "type": "number"
                }
            ]
        },
        "asin": {
            "description": "Get the arc sine",
            "category": "numeric",
            "deterministic": true,
            "return": "number",
            "params": [
                {
                    "name": "value",
                    "type": "number"
                }
            ]
        },
        "atan": {
            "description": "Get the arc tangent",
            "category": "numeric",
            "deterministic": true,
            "return": "number",
            "params": [
                {
                    "name": "value",
                    "type": "number"
                }
            ]
        },
        "atan2": {
            "description": "Get the arc tangent of x and y",
            "category": "numeric",
            "deterministic": true,
            "return": "number",
            "params": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                }
            ]
        },
        "ceil": {
            "description": "Get the smallest following integer",
            "category": "numeric",
            "deterministic": true,
            "return": "number",
            "params": [
                {
                    "name": "value",
                    "type": "number"
                }
            ]
        },
        "cos": {
            "description": "Get the cosine",
            "category": "numeric",
            "deterministic": true,
            "return": "number",
            "params": [
                {
                    "name": "value",
                    "type": "number"
                }
            ]
        },
        "cosh": {
            "description": "Get hyperbolic cosine",
            "category": "numeric",
            "deterministic": true,
            "return": "number",
            "params": [
                {
                    "name": "value",
                    "type": "number"
                }
            ]
        },
        "exp": {
            "description": "Raise e to the nth power",
            "category": "numeric",
            "deterministic": true,
            "return": "number",
            "params": [
                {
                    "name": "value",
                    "type": "number"
                }
            ]
        },
        "floor": {
            "description": "Get the largest preceding integer",
            "category": "numeric",
            "deterministic": true,
            "return": "number",
            "params": [
                {
                    "name": "value",
                    "type": "number"
                }
            ]
        },
        "ln": {
            "description": "Get natural logarithm of num",
            "category": "numeric",
            "deterministic": true,
            "return": "number",
            "params": [
                {
                    "name": "value",
                    "type": "number"
                }
            ]
        },
        "log": {
            "description": "Get logarithm, base num1, of num2",
            "category": "numeric",
            "deterministic": true,
            "return": "number",
            "params": [
                {
                    "name": "n1",
                    "type": "number"
                },
                {
                    "name": "n2",
                    "type": "number"
                }
            ]
        },
        "log10": {
            "description": "Return the base 10 logarithm of x",
            "category": "numeric",
            "deterministic": true,
            "return": "number",
            "params": [
                {
                    "name": "value",
                    "type": "number"
                }
            ]
        },
        "remainder": {
            "description": "Get remainder",
            "category": "numeric",
            "deterministic": true,
            "return": "number",
            "params": [
                {
                    "name": "n1",
                    "type": "number"
                },
                {
                    "name": "n2",
                    "type": "number"
                }
            ]
        },
        "round": {
            "description": "Get rounded value",
            "category": "numeric",
            "deterministic": true,
            "return": "number",
            "params": [
                {
                    "name": "value",
                    "type": "number"
                },
                {
                    "name": "decimals",
                    "type": "number"
                }
            ]
        },
        "sign": {
            "description": "Get sign of exp",
            "category": "numeric",
            "deterministic": true,
            "return": "number",
            "params": [
                {
                    "name": "value",
                    "type": "number"
                }
            ]
        },
        "sin": {
            "description": "Get sine",
            "category": "numeric",
            "deterministic": true,
            "return": "number",
            "params": [
                {
                    "name": "value",
                    "type": "number"
                }
            ]
        },
        "sinh": {
            "description": "Get hyperbolic sine",
            "category": "numeric",
            "deterministic": true,
            "return": "number",
            "params": [
                {
                    "name": "value",
                    "type": "number"
                }
            ]
        },
        "tan": {
            "description": "Get tangent",
            "category": "numeric",
            "deterministic": true,
            "return": "number",
            "params": [
                {
                    "name": "value",
                    "type": "number"
                }
            ]
        },
        "tanh": {
            "description": "Get hyperbolic tangent",
            "category": "numeric",
            "deterministic": true,
            "return": "number",
            "params": [
                {
                    "name": "value",
                    "type": "number"
                }
            ]
        },
        "trunc": {
            "description": "Truncate num",
            "category": "numeric",
            "deterministic": true,
            "return": "number",
            "params": [
                {
                    "name": "value",
                    "type": "number"
                }
            ]
        },
        "chr": {
            "description": "Get character from ASCII code",
            "category": "string",
            "deterministic": true,
            "return": "string",
            "params": [
                {
                    "name": "ascii",
                    "type": "number"
                }
            ]
        },
        "strCount": {
            "description": "Count value in source",
            "category": "string",
            "deterministic": true,
            "return": "number",
            "params": [
                {
                    "name": "source",
                    "type": "string"
                },
                {
                    "name": "value",
                    "type": "string"
                }
            ]
        },
        "initcap": {
            "description": "Capitalize words",
            "category": "string",
            "deterministic": true,
            "return": "string",
            "params": [
                {
                    "name": "value",
                    "type": "string"
                }
            ]
        },
        "lower": {
            "description": "Lowercase string",
            "category": "string",
            "deterministic": true,
            "return": "string",
            "params": [
                {
                    "name": "value",
                    "type": "string"
                }
            ]
        },
        "lpad": {
            "description": "Pad the left-side of string",
            "category": "string",
            "deterministic": true,
            "return": "string",
            "params": [
                {
                    "name": "value",
                    "type": "string"
                },
                {
                    "name": "len",
                    "type": "number"
                },
                {
                    "name": "pad",
                    "type": "string"
                }
            ]
        },
        "ltrim": {
            "description": "Remove leading chars",
            "category": "string",
            "deterministic": true,
            "return": "string",
            "params": [
                {
                    "name": "value",
                    "type": "string"
                }
            ]
        },
        "replace": {
            "description": "The replace() method searches a string for a specified value and returns a new string where the specified values are replaced.",
            "category": "string",
            "deterministic": true,
            "return": "string",
            "params": [
                {
                    "name": "value",
                    "type": "string"
                },
                {
                    "name": "source",
                    "type": "string"
                },
                {
                    "name": "target",
                    "type": "string"
                }
            ]
        },
        "rpad": {
            "description": "Pad the right-side of string",
            "category": "string",
            "deterministic": true,
            "return": "string",
            "params": [
                {
                    "name": "value",
                    "type": "string"
                },
                {
                    "name": "len",
                    "type": "number"
                },
                {
                    "name": "pad",
                    "type": "string"
                }
            ]
        },
        "rtrim": {
            "description": "Remove trailing spaces",
            "category": "string",
            "deterministic": true,
            "return": "string",
            "params": [
                {
                    "name": "value",
                    "type": "string"
                }
            ]
        },
        "substr": {
            "description": "Get a substring of string",
            "category": "string",
            "deterministic": true,
            "return": "string",
            "params": [
                {
                    "name": "value",
                    "type": "string"
                },
                {
                    "name": "from",
                    "type": "number"
                },
                {
                    "name": "count",
                    "type": "number"
                }
            ]
        },
        "trim": {
            "description": "Remove characters",
            "category": "string",
            "deterministic": true,
            "return": "string",
            "params": [
                {
                    "name": "value",
                    "type": "string"
                }
            ]
        },
        "upper": {
            "description": "Uppercase string",
            "category": "string",
            "deterministic": true,
            "return": "string",
            "params": [
                {
                    "name": "value",
                    "type": "string"
                }
            ]
        },
        "concat": {
            "description": "String concatenation",
            "category": "string",
            "deterministic": true,
            "multipleParams": true,
            "return": "string",
            "params": [
                {
                    "name": "values",
                    "type": "string"
                }
            ]
        },
        "capitalize": {
            "description": "Make the first character have upper case and the rest lower case",
            "category": "string",
            "deterministic": true,
            "return": "string",
            "params": [
                {
                    "name": "value",
                    "type": "string"
                }
            ]
        },
        "curtime": {
            "description": "Get the current time",
            "category": "datetime",
            "return": "Date"
        },
        "today": {
            "description": "Get the current date",
            "category": "datetime",
            "return": "Date"
        },
        "now": {
            "description": "Get the current datetime",
            "category": "datetime",
            "return": "Date"
        },
        "dateToString": {
            "description": "Convert date to string with ISO 8601 format",
            "category": "datetime",
            "return": "string",
            "params": [
                {
                    "name": "value",
                    "type": "Date"
                }
            ]
        },
        "time": {
            "description": "Convert string to time",
            "category": "datetime",
            "deterministic": true,
            "return": "Date",
            "params": [
                {
                    "name": "value",
                    "type": "string"
                }
            ]
        },
        "date": {
            "description": "Convert string to date",
            "category": "datetime",
            "deterministic": true,
            "return": "Date",
            "params": [
                {
                    "name": "value",
                    "type": "string"
                }
            ]
        },
        "datetime": {
            "description": "Convert string to datetime",
            "category": "datetime",
            "deterministic": true,
            "return": "Date",
            "params": [
                {
                    "name": "value",
                    "type": "string"
                }
            ]
        },
        "year": {
            "description": "Get year from date",
            "category": "datetime",
            "deterministic": true,
            "return": "number",
            "params": [
                {
                    "name": "value",
                    "type": "Date"
                }
            ]
        },
        "month": {
            "description": "Get month from date",
            "category": "datetime",
            "deterministic": true,
            "return": "number",
            "params": [
                {
                    "name": "value",
                    "type": "Date"
                }
            ]
        },
        "day": {
            "description": "Get day of month from date",
            "category": "datetime",
            "deterministic": true,
            "return": "number",
            "params": [
                {
                    "name": "value",
                    "type": "Date"
                }
            ]
        },
        "weekday": {
            "description": "get date of week from date",
            "category": "datetime",
            "deterministic": true,
            "return": "number",
            "params": [
                {
                    "name": "value",
                    "type": "Date"
                }
            ]
        },
        "hours": {
            "description": "get hour from date",
            "category": "datetime",
            "deterministic": true,
            "return": "number",
            "params": [
                {
                    "name": "value",
                    "type": "Date"
                }
            ]
        },
        "minutes": {
            "description": "Get minutes from date",
            "category": "datetime",
            "deterministic": true,
            "return": "number",
            "params": [
                {
                    "name": "value",
                    "type": "Date"
                }
            ]
        },
        "seconds": {
            "description": "Get seconds from date",
            "category": "datetime",
            "deterministic": true,
            "return": "number",
            "params": [
                {
                    "name": "value",
                    "type": "Date"
                }
            ]
        },
        "addYear": {
            "description": "Add years to a date",
            "category": "datetime",
            "deterministic": true,
            "return": "Date",
            "params": [
                {
                    "name": "date",
                    "type": "Date"
                },
                {
                    "name": "value",
                    "type": "number"
                }
            ]
        },
        "addMonth": {
            "description": "Add months to a date",
            "category": "datetime",
            "deterministic": true,
            "return": "Date",
            "params": [
                {
                    "name": "date",
                    "type": "Date"
                },
                {
                    "name": "value",
                    "type": "number"
                }
            ]
        },
        "addDay": {
            "description": "Add days to a date",
            "category": "datetime",
            "deterministic": true,
            "return": "Date",
            "params": [
                {
                    "name": "date",
                    "type": "Date"
                },
                {
                    "name": "value",
                    "type": "number"
                }
            ]
        },
        "addHours": {
            "description": "Add hours to a date",
            "category": "datetime",
            "deterministic": true,
            "return": "Date",
            "params": [
                {
                    "name": "date",
                    "type": "Date"
                },
                {
                    "name": "value",
                    "type": "number"
                }
            ]
        },
        "addMinutes": {
            "description": "Add minutes to a date",
            "category": "datetime",
            "deterministic": true,
            "return": "Date",
            "params": [
                {
                    "name": "date",
                    "type": "Date"
                },
                {
                    "name": "value",
                    "type": "number"
                }
            ]
        },
        "addSeconds": {
            "description": "Add seconds to a date",
            "category": "datetime",
            "deterministic": true,
            "return": "Date",
            "params": [
                {
                    "name": "date",
                    "type": "Date"
                },
                {
                    "name": "value",
                    "type": "number"
                }
            ]
        },
        "addTime": {
            "description": "Add time to a date",
            "category": "datetime",
            "deterministic": true,
            "return": "Date",
            "params": [
                {
                    "name": "date",
                    "type": "Date"
                },
                {
                    "name": "time",
                    "type": "Date"
                }
            ]
        },
        "dateDiff": {
            "description": "difference between two dates",
            "category": "datetime",
            "deterministic": true,
            "return": "Date",
            "params": [
                {
                    "name": "date",
                    "type": "Date"
                },
                {
                    "name": "date2",
                    "type": "Date"
                }
            ]
        },
        "timeDiff": {
            "description": "difference between two times",
            "category": "datetime",
            "deterministic": true,
            "return": "Date",
            "params": [
                {
                    "name": "time",
                    "type": "Date"
                },
                {
                    "name": "time2",
                    "type": "Date"
                }
            ]
        },
        "toString": {
            "description": "convert to string",
            "category": "convert",
            "deterministic": true,
            "return": "string",
            "params": [
                {
                    "name": "value",
                    "type": "any"
                }
            ]
        },
        "toJson": {
            "description": "convert to json",
            "category": "convert",
            "deterministic": true,
            "return": "object",
            "params": [
                {
                    "name": "value",
                    "type": "string"
                }
            ]
        },
        "toNumber": {
            "description": "convert to number",
            "category": "convert",
            "deterministic": true,
            "return": "number",
            "params": [
                {
                    "name": "value",
                    "type": "string"
                }
            ]
        },
        "nvl": {
            "description": "Allows you to replace null values with a default value.",
            "category": "nullable",
            "deterministic": true,
            "return": "T",
            "params": [
                {
                    "name": "value",
                    "type": "T"
                },
                {
                    "name": "_default",
                    "type": "T"
                }
            ]
        },
        "nvl2": {
            "description": "Extends the functionality found in the NVL function. It lets you substitutes a value when a null value is encountered as well as when a non-null value is encountered.",
            "category": "nullable",
            "deterministic": true,
            "return": "T",
            "params": [
                {
                    "name": "value",
                    "type": "T"
                },
                {
                    "name": "a",
                    "type": "T"
                },
                {
                    "name": "b",
                    "type": "T"
                }
            ]
        },
        "isNull": {
            "description": "Evaluate if it is null",
            "category": "nullable",
            "deterministic": true,
            "return": "boolean",
            "params": [
                {
                    "name": "value",
                    "type": "any"
                }
            ]
        },
        "isNotNull": {
            "description": "Evaluate if it is not null",
            "category": "nullable",
            "deterministic": true,
            "return": "boolean",
            "params": [
                {
                    "name": "value",
                    "type": "any"
                }
            ]
        },
        "isEmpty": {
            "description": "Evaluate if it is empty",
            "category": "nullable",
            "deterministic": true,
            "return": "boolean",
            "params": [
                {
                    "name": "value",
                    "type": "any"
                }
            ]
        },
        "foreach": {
            "description": "Calls a function for each element in an array.",
            "type": "arrow",
            "category": "array",
            "return": "void",
            "params": [
                {
                    "name": "list",
                    "type": "any[]"
                },
                {
                    "name": "method",
                    "type": "function"
                }
            ]
        },
        "filter": {
            "description": "Creates a new array filled with elements that pass a test provided by a function",
            "type": "arrow",
            "category": "array",
            "return": "T[]",
            "params": [
                {
                    "name": "list",
                    "type": "T[]"
                },
                {
                    "name": "method",
                    "type": "function"
                }
            ]
        },
        "first": {
            "description": "Returns the first value of the array that meets a condition",
            "type": "arrow",
            "category": "array",
            "return": "T",
            "params": [
                {
                    "name": "list",
                    "type": "T[]"
                },
                {
                    "name": "method",
                    "type": "function"
                }
            ]
        },
        "last": {
            "description": "Returns the last value of the array that meets a condition",
            "type": "arrow",
            "category": "array",
            "return": "T",
            "params": [
                {
                    "name": "list",
                    "type": "T[]"
                },
                {
                    "name": "method",
                    "type": "function"
                }
            ]
        },
        "map": {
            "description": "Creates a new array from calling a function for every array element.",
            "type": "arrow",
            "category": "array",
            "return": "any[]",
            "params": [
                {
                    "name": "list",
                    "type": "any[]"
                },
                {
                    "name": "method",
                    "type": "function"
                }
            ]
        },
        "sort": {
            "description": "Sorts the elements of an array.",
            "type": "arrow",
            "category": "array",
            "return": "T[]",
            "params": [
                {
                    "name": "list",
                    "type": "T[]"
                },
                {
                    "name": "method",
                    "type": "function"
                }
            ]
        },
        "reverse": {
            "description": "Reverses the order of the elements in an array.",
            "type": "arrow",
            "category": "array",
            "return": "T[]",
            "params": [
                {
                    "name": "list",
                    "type": "T[]"
                },
                {
                    "name": "method",
                    "type": "function"
                }
            ]
        },
        "remove": {
            "description": "Eliminate the elements of the array that meet the filter condition",
            "type": "arrow",
            "category": "array",
            "return": "number",
            "params": [
                {
                    "name": "list",
                    "type": "any[]"
                },
                {
                    "name": "method",
                    "type": "function"
                }
            ]
        },
        "push": {
            "description": "Adds new items to the end of an array",
            "type": "child",
            "category": "array",
            "return": "number",
            "params": [
                {
                    "name": "list",
                    "type": "T[]"
                },
                {
                    "name": "value",
                    "type": "T"
                }
            ]
        },
        "pop": {
            "description": "Removes (pops) the last element of an array and return element",
            "type": "child",
            "category": "array",
            "return": "T",
            "params": [
                {
                    "name": "list",
                    "type": "T[]"
                }
            ]
        },
        "length": {
            "description": "Calculating the number of items in a array.",
            "type": "child",
            "category": "array",
            "return": "number",
            "params": [
                {
                    "name": "list",
                    "type": "T[]"
                }
            ]
        }
    },
    "enums": {
        "DayOfWeek": {
            "Sunday": 0,
            "Monday": 1,
            "Tuesday": 2,
            "Wednesday": 3,
            "Thursday": 4,
            "Friday": 5,
            "Saturday": 6
        }
    }
}
