import { expressions } from '../../lib'

describe('Numeric', () => {
	test('arithmetic', () => {		
		expect(2).toBe(expressions.eval('1+1'))
		expect(1+1).toBe(expressions.eval('1+1'))
		expect(3+2-1).toBe(expressions.eval('3+2-1')) 
		expect(3*4-1).toBe(expressions.eval('3*4-1'))
		expect(1+4*2).toBe(expressions.eval('1+4*2'))
		expect(4+4+2+50+600).toBe(expressions.eval('4+4+2+50+600'))
		expect(1-2-5).toBe(expressions.eval('1-2-5'))
		expect((1+4)*2).toBe(expressions.eval('(1+4)*2'))
		expect((2+3)*2).toBe(expressions.eval('(2+3)*2'))
		expect(2*(3+2)).toBe(expressions.eval('2*(3+2)'))
		expect(2*(3+2)*(2+2)).toBe(expressions.eval('2*(3+2)*(2+2)'))
		expect(1+2*3*4).toBe(expressions.eval('1+2*3*4'))  
		expect(2*3+4*5).toBe(expressions.eval('2*3+4*5'))
		expect((1+(2**3)*4)).toBe(expressions.eval('(1+(2**3)*4'))
		expect(1+2**3*4).toBe(expressions.eval('1+2**3*4')) 
		expect(1+2**(3*4)).toBe(expressions.eval('1+2**(3*4)'))
	})
	test('comparisons', () => {	
		expect(3>2).toBe(expressions.eval('3>2'))
		expect(3>2*2).toBe(expressions.eval('3>2*2'))
		expect(-3>2*22).toBe(expressions.eval('-3>2*2'))
		expect(4>=2*2).toBe(expressions.eval('4>=2*2'))
		expect(3<=2*2).toBe(expressions.eval('3<=2*2'))
		expect(3!=2*2).toBe(expressions.eval('3!=2*2'))
		expect(4!=2*2).toBe(expressions.eval('4!=2*2'))
		expect(-4!=2*2).toBe(expressions.eval('-4!=2*2'))
		expect(-4==-2*2).toBe(expressions.eval('-4==-2*2'))
		expect(-4 == -(2 * 2)).toBe(expressions.eval('-4==-(2*2)'))			
	})
	test('variables', () => {	
		expect(false).toBe(expressions.eval('a>b',{"a":1,"b":2}))
		expect(3).toBe(expressions.eval('a+b',{"a":1,"b":2}))
		expect(-2).toBe(expressions.eval('-a*b',{"a":1,"b":2}))
		expect(true).toBe(expressions.eval('a*3==b+1',{"a":1,"b":2}))
		expect(8).toBe(expressions.eval('(a*b)+(2*a+2*b)',{"a":1,"b":2}))
		expect(5).toBe(expressions.eval('2**b+a',{"a":1,"b":2})) 
		expect(5).toBe(expressions.eval('c.b', { "a": "1", "b": 2, "c": { "a": 4, "b": 5 } }))
	})
	test('assignments', () => {	
		const data = {"a":"1","b":2,"c":{"a":4,"b":5}}
		expressions.eval('a=8',data)
		expect(8).toBe(data['a'])
		expressions.eval('c.a=1',data)
		expect(1).toBe(data['c']['a'])
	})
	test('functions', () => {	
		expect(2).toBe(expressions.eval('nvl(a,b)',{"a":null,"b":2})) 	
	})
	test('labs', () => {	
		const context = { a: '1', b: 2, c: { a: 4, b: 5 } }
		expect(4).toBe(expressions.eval('3+2-1',context))
		expect(11).toBe(expressions.eval('3*4-1',context))
		expect(-6).toBe(expressions.eval('1-2-5',context))
		expect(10).toBe(expressions.eval('(2+3)*2',context))
		expect(10).toBe(expressions.eval('2*(3+2)',context))
		expect(25).toBe(expressions.eval('1+2*3*4',context))
		expect(33).toBe(expressions.eval('(1+(2**3)*4',context))
		expect(4097).toBe(expressions.eval('1+2**(3*4)',context))
		expect(8).toBe(expressions.eval('(a*b)+(2*a+2*b)',context))
		expect('41').toBe(expressions.eval('2**b+a',context))
		expect(5).toBe(expressions.eval('c.b',context))
		expect(9).toBe(expressions.eval('abs(-9)',context))
		expect(1.1218683324277348).toBe(expressions.eval('acos(0.434)',context))
		expect(0.44892799436716174).toBe(expressions.eval('asin(0.434)',context))
		expect(1.1071487177940904).toBe(expressions.eval('atan(2)',context))
		expect(1.4056476493802699).toBe(expressions.eval('atan2(90, 15)',context))
		expect(2).toBe(expressions.eval('ceil(2)',context))
		expect(-0.4161468365471424).toBe(expressions.eval('cos(2)',context))
		expect(3.7621956910836314).toBe(expressions.eval('cosh(2)',context))
		expect(1096.6331584284585).toBe(expressions.eval('exp(7)',context))
		expect(7).toBe(expressions.eval('floor(7)',context))
		expect(1.9459101490553132).toBe(expressions.eval('ln(7)',context))
		expect(1.9459101490553132).toBe(expressions.eval('log(7,10)',context))
		expect(0.8450980400142568).toBe(expressions.eval('log10(7)',context))
		expect(1).toBe(expressions.eval('remainder(7,2)',context))
		expect(8).toBe(expressions.eval('round(7.984938,2)',context))
		expect(-1).toBe(expressions.eval('sign(-7)',context))
		expect(0.6569865987187891).toBe(expressions.eval('sin(7)',context))
		expect(548.3161232732465).toBe(expressions.eval('sinh(7)',context))
		expect(0.8714479827243187).toBe(expressions.eval('tan(7)',context))
		expect(0.9999983369439447).toBe(expressions.eval('tanh(7)',context))
		expect(7).toBe(expressions.eval('trunc(7.984938,2)',context))
		expect(3.141516).toBe(expressions.eval('toNumber("3.141516")',context))
	})
})	